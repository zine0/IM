// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
insert into "user" (username,password,created_at)
values ($1,$2,$3)
`

type CreateUserParams struct {
	Username  pgtype.Text      `json:"username"`
	Password  pgtype.Text      `json:"password"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Username, arg.Password, arg.CreatedAt)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
update "user"
set deleted_at = $2
where ID = $1
`

type DeleteUserParams struct {
	ID        int32            `json:"id"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.DeletedAt)
	return err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
    SELECT 1 FROM "user" WHERE username = $1
) AS exists
`

func (q *Queries) UserExists(ctx context.Context, username pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
